<style type="text/css">.scroller-container {
      overflow: hidden;
      position: relative;
      width: 100%;
      height: 200px;
      background: #fff;
      border-top: 3px solid #333;
      border-bottom: 3px solid #333;
      cursor: grab;
    }
    .scroller-track {
      display: flex;
      width: max-content;
      animation: scroll-left 30s linear infinite;
    }
    .scroller-container:hover .scroller-track {
      animation-play-state: paused;
    }
    .scroller-track img {
      height: 200px;
      width: 400px;
      object-fit: contain;
      margin-right: 10px;
      user-select: none;
      pointer-events: auto;
      background: #ddd;
      display: flex;
      align-items: center;
      justify-content: center;
      font-family: sans-serif;
      font-size: 24px;
      color: #000;
    }
    @keyframes scroll-left {
      0% {
        transform: translateX(0);
      }
      100% {
        transform: translateX(-50%);
      }
    }
</style>
<div class="scroller-container" id="scroller">
<div class="scroller-track" id="track"><img alt="Image 1" /> <img alt="Image 2" /> <img alt="Image 3" /> <img alt="Image 4" /> <img alt="Image 1" /> <img alt="Image 2" /> <img alt="Image 3" /> <img alt="Image 4" /></div>
</div>

<script>
    const scroller = document.getElementById('scroller');
    const track = document.getElementById('track');
    let isDown = false;
    let startX;
    let scrollLeft;

    scroller.addEventListener('mousedown', (e) => {
      isDown = true;
      track.style.animationPlayState = 'paused';
      startX = e.pageX - scroller.offsetLeft;
      scrollLeft = scroller.scrollLeft;
    });

    scroller.addEventListener('mouseleave', () => {
      isDown = false;
      track.style.animationPlayState = 'running';
    });

    scroller.addEventListener('mouseup', () => {
      isDown = false;
      track.style.animationPlayState = 'running';
    });

    scroller.addEventListener('mousemove', (e) => {
      if (!isDown) return;
      e.preventDefault();
      const x = e.pageX - scroller.offsetLeft;
      const walk = (x - startX) * 2;
      scroller.scrollLeft = scrollLeft - walk;
    });

    scroller.addEventListener('touchstart', (e) => {
      track.style.animationPlayState = 'paused';
      startX = e.touches[0].pageX - scroller.offsetLeft;
      scrollLeft = scroller.scrollLeft;
    });

    scroller.addEventListener('touchmove', (e) => {
      const x = e.touches[0].pageX - scroller.offsetLeft;
      const walk = (x - startX) * 2;
      scroller.scrollLeft = scrollLeft - walk;
    });

    scroller.addEventListener('touchend', () => {
      track.style.animationPlayState = 'running';
    });
  </script>
